/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  //LOOKAHEAD = 1;
}

PARSER_BEGIN(FormulaParser)
package edu.tum.cs.logic.parser;

import java.util.*;
import edu.tum.cs.logic.*;
import java.io.*;

public class FormulaParser {
	public static void main(String args[]) throws ParseException {
		String test;
		test = "foo(x,y) => !bar(x,zt) v baz(y)";
		test = "numberEats(o,2) <=> EXIST p, p2 (eats(o,p) ^ eats(o,p2) ^ !(o=p) ^ !(o=p2) ^ !(p=p2) ^ !(EXIST q (eats(o,q) ^ !(p=q) ^ !(p2=q))))";
		test = "foo(v) => bar(v)";
  		Formula f = parse(test);
  		System.out.println("formula: " + f);
  	}
  	
  	public static Formula parse(String s) throws ParseException {
  		FormulaParser parser = new FormulaParser(new StringReader(s));
  		Formula f = parser.formula();
  		Token t = parser.getNextToken();
  		if(t.beginColumn != s.length())
  			throw new ParseException("Unexpected token '" + t.toString() + "'");
  		return f;
  	}
}
PARSER_END(FormulaParser)

SKIP : {" " | "\r" | "\t" | "\n" }
TOKEN : { 
  < NOT: "!" >
| < OR: "v" >
| < AND: "^" >
| < IMPLIES: "=>" >
| < EQUALS: "=" >
| < IFF: "<=>" >
| < EXIST: "EXIST" | "EXISTS" >
| < FORALL: "FORALL" >
| < OPENRB: "(" >
| < CLOSERB: ")" >
| < LISTSEP: "," >
| < #LCCHAR: ["a"-"z"] >
| < #UCCHAR: ["A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
| < #IDENTCHAR: <LCCHAR> | <UCCHAR> | <DIGIT> | "_" >
| < NUMBER: (<DIGIT>)+ >
| < UCIDENT: <UCCHAR>(<IDENTCHAR>)* >
| < LCIDENT: (<LCCHAR> | "_")(<IDENTCHAR>)* >
}

String variable() : { Token t; } { (t = <LCIDENT> | t = <OR>) {return t.image;} }
String constant() : { Token t; } { (t = <UCIDENT> | t = <NUMBER>) {return t.image;} }

Collection<String> paramlist() : 
{
	Collection<String> ret;
	String arg;
}
{
	{ ret = new Vector<String>(); }
	( arg = variable() | arg = constant() )
	{ ret.add(arg); }
	( 
		<LISTSEP>
		( arg = variable() | arg = constant() )
		{ ret.add(arg); }
	)*
	{ return ret; }
}

Collection<String> varlist() : 
{
	Collection<String> ret;
	String arg;
}
{
	{ ret = new Vector<String>(); }
	( arg = variable() )
	{ ret.add(arg); }
	( 
		<LISTSEP>
		( arg = variable() )
		{ ret.add(arg); }
	)*
	{ return ret; }
}

String predName() : 
{
	Token t;
}
{
	(t = <LCIDENT> | t = <UCIDENT>)
	{ return t.image; }
}

Atom atom() :
{
	Token t;
	String predName;
	Collection<String> params;
}
{
	predName = predName()
	<OPENRB>
	params = paramlist()
	<CLOSERB>
	{ return new Atom(predName, params); }
}

Literal literal() : 
{
	Atom atom;
	boolean isTrue;
}
{
	(
		atom = atom() 
		{ isTrue = true; }
	| 
		<NOT> atom = atom()
		{ isTrue = false; }
	)
	{ return new Literal(isTrue, atom); }
}

Negation negation() :
{
	Formula f;
}
{
	<NOT> <OPENRB> f = formula() <CLOSERB>
	{ return new Negation(f); }
}

Exist exist() :
{
	Formula f;
	Collection<String> vars;
}
{
	<EXIST> 
	vars = varlist()
	<OPENRB>
	f = formula()
	<CLOSERB>
	{ return new Exist(vars, f); } 
}

ForAll forall() :
{
	Formula f;
	Collection<String> vars;
}
{
	<FORALL> 
	vars = varlist()
	<OPENRB>
	f = formula()
	<CLOSERB>
	{ return new ForAll(vars, f); } 
}

Equality equality() :
{
	String left, right;
}
{
	(left = variable() | left = constant())
	<EQUALS>
	(right = variable() | right = constant())
	{ return new Equality(left, right); }
}

Formula formulaElement() :
{
	Formula f;
}
{
	(
		LOOKAHEAD(<NOT><OPENRB>)
		f = negation()
	|
		LOOKAHEAD(equality()) 
		f = equality()
	|
		f = literal()
	|
		<OPENRB> f = formula() <CLOSERB>
	| 
		f = exist()
	|
		f = forall()
	)	
	{ return f; }
}

Formula disjunction() :
{
	Formula f;
	Vector<Formula> children;
}
{
	{ children = new Vector<Formula>(); }
	f = formulaElement()
	{ children.add(f); }
	(
		<OR>
		f = formulaElement()
		{ children.add(f); }
	)*
	{ return children.size() > 1 ? new Disjunction(children) : f; }
}

Formula conjunction() :
{
	Formula f;
	Vector<Formula> children;
}
{
	{ children = new Vector<Formula>(); }
	f = disjunction()
	{ children.add(f); }
	(
		<AND>
		f = disjunction()
		{ children.add(f); }
	)*
	{ return children.size() > 1 ? new Conjunction(children) : f; }
}

Formula implication() :
{
	Formula f1, f2;
}
{
	{ f2 = null; }
	f1 = conjunction()
	(
		<IMPLIES>
		f2 = conjunction()
	)?
	{ return f2 == null ? f1 : new Implication(f1, f2); }
}

Formula biimplication() :
{
	Formula f1, f2;
}
{
	{ f2 = null; }
	f1 = implication()
	(
		<IFF>
		f2 = implication()
	)?
	{ return f2 == null ? f1 : new Biimplication(f1, f2); }
}

Formula formula() :
{
	Formula f;
}
{
	f = biimplication()
	{ return f; }
}